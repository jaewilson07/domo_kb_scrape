# | export
@patch(cls_method=True)
async def _from_looper(cls: ResponseGetData,
                       res: aiohttp.ClientResponse  # requests response object
                       array :list 
                       ) -> ResponseGetData:

    """async method returns ResponseGetData"""

    if res.ok and "application/json" in res.headers.get("Content-Type", {}):
        try:
            return cls(
                status=res.status, response=await res.json(), is_success=True
            )

        # handle if unable to decode json()
        except asyncio.TimeoutError as e:
            print(e)
            print("response included json, but defaulted to backup decode method")

            return cls(
                status=res.status, response=await res.read(), is_success=True
            )

        # response is text
    elif res.ok:
        return cls(
            status=res.status, response=await res.text(), is_success=True
        )

    # response is error
    else:
        return cls(status=res.status, response=res.reason, is_success=False)
