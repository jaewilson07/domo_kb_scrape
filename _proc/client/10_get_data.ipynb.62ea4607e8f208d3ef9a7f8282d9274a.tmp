# | export
async def looper(
    auth: dmda.DomoAuth,
    session: aiohttp.ClientSession,
    url,
    offset_params,
    arr_fn: callable,
    loop_until_end: bool = False,
    method="POST",
    body: dict = None,
    fixed_params: dict = None,
    offset_params_in_body: bool = False,
    body_fn=None,
    limit=1000,
    skip = 0,
    maximum=2000,
    debug_api: bool = False,
    debug_loop: bool = False
) -> rgd.ResponseGetData:

    is_close_session = False
    
    if not session:
        session = aiohttp.ClientSession()
        is_close_session = True


    allRows = []
    isLoop = True

    res = None

    if maximum < limit:
        limit = maximum

    while isLoop:
        params = fixed_params or {}

        if offset_params_in_body:
            body[offset_params.get("offset")] = skip
            body[offset_params.get("limit")] = limit

        else:
            params[offset_params.get("offset")] = skip
            params[offset_params.get("limit")] = limit

        if body_fn:
            body = body_fn(skip, limit)

        if debug_loop:
            print(
                f"\nðŸš€ Retrieving records {skip} through {skip + limit} via {url}")
            # pprint(params)

        res = await get_data(
            auth=auth,
            url=url,
            method=method,
            params=params,
            session=session,
            body=body,
            debug_api=debug_api,
        )

        if not res.is_success:
            return res
            
        try:
            newRecords = arr_fn(res)
        
        except Exception as e:
            raise LooperError()


        allRows += newRecords

        if loop_until_end and len(newRecords) != 0:
            maximum = maximum + limit

        if debug_loop:
            print({"all_rows": len(allRows), "new_records": len(newRecords)})

        if len(allRows) >= maximum or len(newRecords) == 0:
            if debug_loop:
                print(
                    f"\nðŸŽ‰ Success - {len(allRows)} records retrieved from {url} in query looper\n")

            break


        skip += len(newRecords)
        
        if skip + limit > maximum:
            limit = maximum - len(allRows)

            if debug_loop:
                print(f"skip: {skip}, limit: {limit}")
    
    if is_close_session:
        await session.close()

    return await rgd.ResponseGetData._from_looper(res = res, array = allRows)