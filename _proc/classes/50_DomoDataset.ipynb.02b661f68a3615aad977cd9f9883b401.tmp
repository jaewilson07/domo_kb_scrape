#| export

class InvalidDatasetError(Exception):
    def __init__(self, message="invalid dataset", domo_instance=None, dataset_id=None):

        if dataset_id:
            message = f"{message} - {dataset_id}"

        if domo_instance:
            message = f"{message} in {domo_instance}"

        super().__init__( message )


@patch(cls_method=True)
async def get_from_id(cls: DomoDataset,
                      dataset_id: str,
                      auth: dmda.DomoAuth,
                      debug_api: bool = False, 
                      return_raw_res : bool = False ):
    
    """retrieves dataset metadata"""

    res = await dataset_routes.get_dataset_by_id(auth=auth,
                                                 dataset_id=dataset_id, debug_api=debug_api)
    if res.status == 404:
        raise InvalidDatasetError(
            domo_instance=auth.domo_instance, dataset_id=dataset_id)
    
    if return_raw_res:
        return res.response

    dd = util_dd.DictDot(res.response)
    ds = cls(
        auth=auth,
        id=dd.id,
        display_type=dd.displayType,
        data_provider_type=dd.dataProviderType,
        name=dd.name,
        description=dd.description,
        owner=dd.owner,
        formula=dd.properties.formulas.formulas,
        stream_id=dd.streamId,
        row_count=int(dd.rowCount),
        column_count=int(dd.columnCount)
    )

    # if dd.tags:
    #     ds.tags.tag_ls = json.loads(dd.tags)

    # if dd.certification:
    #     # print('class def certification', dd.certification)
    #     ds.certification = dmdc.DomoCertification._from_json(
    #         dd.certification)

    return ds
