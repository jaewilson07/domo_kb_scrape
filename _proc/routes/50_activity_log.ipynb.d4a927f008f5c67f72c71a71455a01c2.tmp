# | export
async def search_activity_log(
    domo_auth: dmda.DomoAuth,
    start_time: int,  # epoch time in milliseconds
    end_time: int,  # epoch time in milliseconds
    maximum: int,
    object_type: Optional[ActivityLog_ObjectType] = None,
    session: aiohttp.ClientSession = None,
    debug_api: bool = False,
    debug_loop: bool = False,
):
"""loops over activity log api to retrieve audit logs"""

    is_close_session = False

    if not session:
        session = aiohttp.ClientSession()
        is_close_session = True

    url = f"https://{domo_auth.domo_instance}.domo.com/api/audit/v1/user-audits"

    if object_type and object_type != ActivityLog_ObjectType.ACTIVITY_LOG:
        url = f"{url}/objectTypes/{object_type.value}"

    fixed_params = {"end": end_time, "start": start_time}

    offset_params = {
        "offset": "offset",
        "limit": "limit",
    }

    def arr_fn(res) -> list[dict]:
        return res.response

    res = await gd.looper(
        auth=domo_auth,
        method="GET",
        url=url,
        arr_fn=arr_fn,
        fixed_params=fixed_params,
        offset_params=offset_params,
        session=session,
        maximum=maximum,
        debug_loop=debug_loop,
        debug_api=debug_api,
    )

    if is_close_session:
        await session.close()

    return res